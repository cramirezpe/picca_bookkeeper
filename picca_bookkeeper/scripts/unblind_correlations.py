"""
unblind_correlations.py
-----------------------

Script for unblinding FITS correlation function, distortion matrix, and metal
distortion matrix files produced by the picca_bookkeeper pipeline.

This script is intended for use only with explicit permission from KP6 conveners
for specific testing purposes.

Functionality:
---------------
    - Removes the "blinding" from FITS files by updating relevant HDU headers
      and field names for correlation function (`--cf`), distortion matrix
      (`--dmat`), and metal distortion matrix (`--metal-dmat`) files.
    - Sets the 'BLINDING' keyword in relevant HDUs to "none" and updates HISTORY
      fields to indicate unblinding.
    - Renames blinded data columns (e.g., "DA_BLIND" to "DA", "DM_BLIND" to
      "DM") in the FITS file headers.

Usage:
------
Run from the command line, specifying the files to unblind:
    python unblind_correlations.py --cf <correlation_function.fits>
    --dmat <distortion_matrix.fits>
    --metal-dmat <metal_distortion_matrix.fits> [--log-level INFO]

Arguments:
    --cf          : Path to the correlation function FITS file to unblind.
    --dmat        : Path to the distortion matrix FITS file to unblind.
    --metal-dmat  : Path to the metal distortion matrix FITS file to unblind.
    --log-level   : Logging verbosity (default: INFO).

Example:
--------
    python unblind_correlations.py --cf my_cf.fits --dmat my_dmat.fits
    --metal-dmat my_metal_dmat.fits --log-level DEBUG

Interactions:
-------------
    - This script is a standalone utility and is not directly imported by other
      modules.
    - It operates on the output FITS files generated by the main picca_bookkeeper
      data reduction and analysis pipeline, modifying their headers and column
      names to remove blinding for test analysis.
    - No internal cross-calls or imports from the main picca_bookkeeper package
      are made, except for using standard Python and astropy functionality.

Caution:
--------
ONLY use this script with appropriate permission, as unblinding is intended for
controlled testing and review.

Note:
-----
Originally written by Ignasi Pérez-Ràfols
"""

from __future__ import annotations

import argparse
import logging
import sys
from pathlib import Path
from typing import TYPE_CHECKING

from astropy.io import fits

if TYPE_CHECKING:
    from typing import Optional
logger = logging.getLogger(__name__)


def main(args: Optional[argparse.Namespace] = None) -> None:
    """
    Entry point for the unblinding script.

    Unblinds one or more FITS files associated with a picca_bookkeeper run,
    depending on the provided command-line arguments.

    For each provided file path:
        - Updates relevant FITS HDU headers and column names to remove blinding.
        - Logs actions performed to stdout based on the log level.

    Arguments:
    ----------
        args (argparse.Namespace, optional): Parsed arguments. If not provided,
            command-line arguments are parsed via `get_args()`.

    Raises:
    -------
        AssertionError: If any required file does not exist or expected HDUs
                        are missing.

    Example:
    --------
        >>> main()  # Uses sys.argv
        >>> args = argparse.Namespace(cf=Path("cf.fits"), dmat=None,
                                      metal_dmat=None, log_level="DEBUG")
        >>> main(args)
    """
    if args is None:
        args = get_args()

    level = logging.getLevelName(args.log_level)
    logging.basicConfig(
        stream=sys.stdout,
        level=level,
        format="%(levelname)s:%(message)s",
    )

    logger.warn(
        "THIS SHOULD ONLY BE USED WITH THE PERMISSION"
        "OF KP6 CONVENERS FOR SPECIFIC TESTS"
    )

    if args.cf is not None:
        logger.info(f"Unblinding correlation function")
        unblind_cf(args.cf)
    if args.dmat is not None:
        logger.info("Unblinding distortion matrix")
        unblind_dmat(args.dmat)
    if args.metal_dmat is not None:
        logger.info("Unblinding metal distortion matrix")
        unblind_metal_dmat(args.metal_dmat)
    logger.info("Done")


def unblind_cf(cf_file: Path) -> None:
    """
    Unblind a correlation function FITS file.

    This function modifies the FITS file in-place by:
        - Setting the 'BLINDING' keyword in the 'ATTRI' HDU to 'none'.
        - Replacing the 'DA_BLIND' column name with 'DA' in the 'COR' HDU.
        - Appending a HISTORY entry to indicate unblinding.

    Arguments:
    ----------
        cf_file (Path): Path to the correlation function FITS file to unblind.

    Raises:
    -------
        AssertionError:
            - If the file does not exist.
            - If expected HDUs ('ATTRI' and 'COR') are missing.

    Example:
    --------
        >>> unblind_cf(Path("my_cf.fits"))
    """
    assert cf_file.is_file()
    with fits.open(cf_file, mode="update") as hdul:
        # modify ATTRI HDU
        assert "ATTRI" in hdul, "missing HDU ATTRI"
        hdul["ATTRI"].header["BLINDING"] = "none"
        hdul["ATTRI"].header["HISTORY"] = "unblinded using force_unblinding.py"

        # modify COR HDU
        assert "ATTRI" in hdul, "missing HDU COR"
        for index in range(1, hdul["COR"].header["TFIELDS"] + 1):
            if hdul["COR"].header[f"TTYPE{index}"] == "DA_BLIND":
                hdul["COR"].header[f"TTYPE{index}"] = "DA"
        hdul["COR"].header["HISTORY"] = "unblinded using force_unblinding.py"


def unblind_dmat(dmat_file: Path) -> None:
    """
    Unblind a distortion matrix FITS file.

    This function modifies the FITS file in-place by:
        - Setting the 'BLINDING' keyword in the 'DMAT' HDU to 'none'.
        - Replacing the 'DM_BLIND' column name with 'DM' in the 'DMAT' HDU.
        - Appending a HISTORY entry to indicate unblinding.

    Arguments:
    ----------
        dmat_file (Path): Path to the distortion matrix FITS file to unblind.

    Raises:
    -------
        AssertionError:
            - If the file does not exist.
            - If the 'DMAT' HDU is missing.

    Example:
    --------
        >>> unblind_dmat(Path("my_dmat.fits"))
    """
    assert dmat_file.is_file()
    with fits.open(dmat_file, mode="update") as hdul:
        # modify DMAT HDU
        assert "DMAT" in hdul, "missing HDU DMAT"
        hdul["DMAT"].header["BLINDING"] = "none"
        for index in range(1, hdul["DMAT"].header["TFIELDS"] + 1):
            if hdul["DMAT"].header[f"TTYPE{index}"] == "DM_BLIND":
                hdul["DMAT"].header[f"TTYPE{index}"] = "DM"
        hdul["DMAT"].header["HISTORY"] = "unblinded using force_unblinding.py"


def unblind_metal_dmat(metal_dmat_file: Path) -> None:
    """
    Unblind a metal distortion matrix FITS file.

    This function modifies the FITS file in-place by:
        - Setting the 'BLINDING' keyword in the 'ATTRI' HDU to 'none'.
        - Replacing any field names in the 'MDMAT' HDU that contain 'DM_BLIND'
          with the unblinded equivalent (e.g., 'DM') while preserving suffixes.
        - Appending a HISTORY entry to each modified HDU to indicate unblinding.

    Arguments:
    ----------
        metal_dmat_file (Path): Path to the metal distortion matrix FITS file.

    Raises:
    -------
        AssertionError:
            - If the file does not exist.
            - If either the 'ATTRI' or 'MDMAT' HDUs are missing.

    Example:
    --------
        >>> unblind_metal_dmat(Path("my_metal_dmat.fits"))
    """
    assert metal_dmat_file.is_file()
    with fits.open(metal_dmat_file, mode="update") as hdul:
        # modify ATTRI HDU
        assert "ATTRI" in hdul, "missing HDU ATTRI"
        hdul["ATTRI"].header["BLINDING"] = "none"
        hdul["ATTRI"].header["HISTORY"] = "unblinded using force_unblinding.py"

        # modify MDMAT HDU
        assert "MDMAT" in hdul, "missing HDU ATTRI"
        for index in range(1, hdul["MDMAT"].header["TFIELDS"] + 1):
            if "DM_BLIND" in hdul["MDMAT"].header[f"TTYPE{index}"]:
                name = hdul["MDMAT"].header[f"TTYPE{index}"]
                mod_name = name.replace("DM_BLIND", "DM")
                hdul["MDMAT"].header[f"TTYPE{index}"] = mod_name
        hdul["MDMAT"].header["HISTORY"] = "unblinded using force_unblinding.py"


def get_args() -> argparse.Namespace:
    """
    Parse command-line arguments for the unblinding script.

    Returns:
    --------
        argparse.Namespace: Namespace with the following attributes:
            - cf (Path or None): Path to the correlation function FITS file.
            - dmat (Path or None): Path to the distortion matrix FITS file.
            - metal_dmat (Path or None): Path to the metal distortion matrix
                FITS file.
            - log_level (str): Logging verbosity level.

    Example:
    --------
        >>> args = get_args()
        >>> print(args.cf, args.log_level)
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--cf", type=Path, default=None, help="Correlation function file"
    )
    parser.add_argument(
        "--dmat", type=Path, default=None, help="Distortion matrix file"
    )
    parser.add_argument(
        "--metal-dmat", type=Path, default=None, help="Metal distortion matrix file"
    )

    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG", "NOTSET"],
    )

    args = parser.parse_args()

    return args


if __name__ == "__main__":
    main()
